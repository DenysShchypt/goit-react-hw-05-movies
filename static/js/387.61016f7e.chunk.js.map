{"version":3,"file":"static/js/387.61016f7e.chunk.js","mappings":"mTACAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAmB,mCAAG,oGACDD,EAAAA,EAAAA,IAAA,6EADC,cAClBE,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAOC,GAAP,uFACCN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,6DADD,cAChBJ,EADgB,yBAEfA,GAFe,2CAAH,sDAKjBK,EAAiB,mCAAG,WAAOC,GAAP,uFACCR,EAAAA,EAAAA,IAAA,gCACxBQ,EADwB,wFADD,cAChBN,EADgB,yBAGfA,EAASC,KAAKC,SAHC,2CAAH,sDAMjBK,EAAY,mCAAG,WAAOH,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4EADN,cACXJ,EADW,yBAEVA,EAASC,KAAKC,QAAQ,IAFZ,2CAAH,sDAKZM,EAAY,mCAAG,WAAOJ,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,qEADN,cACXJ,EADW,yBAEVA,EAASC,KAAKQ,MAFJ,2CAAH,qD,wKCtBLC,EAAgBC,EAAAA,GAAAA,GAAH,8HASbC,EAAgBD,EAAAA,GAAAA,GAAH,4FAMbE,EAAeF,EAAAA,GAAAA,IAAH,4NASZG,EAAiBH,EAAAA,GAAAA,GAAH,6JAOlB,SAAAI,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,KAAnB,I,SCvBJC,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACpBC,GAASD,EAAAA,EAAAA,OAAK,kBAAM,oDAAN,IAqDpB,EAjDa,WACX,OAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkDJ,EAAAA,EAAAA,UAAS,IAA3D,eAAOK,EAAP,KAA0BC,EAA1B,KACQxB,GAAYyB,EAAAA,EAAAA,MAAZzB,QAkBR,OAhBA0B,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIN,GAAa,GACbE,GAAS,GAHb,UAI+BlB,EAAAA,EAAAA,IAAaJ,GAJ5C,OAIU2B,EAJV,OAKIH,EAAqBG,EAAaC,MAAM,EAAG,KAL/C,gDAOIN,GAAS,GAPb,yBASIF,GAAa,GATjB,6EADc,uBAAC,WAAD,wBAadS,EACD,GAAE,CAAC7B,KAGF,gCACGmB,IAAa,SAACF,EAAD,IACbI,IACC,SAACN,EAAD,UAAc,4DAIhB,SAACT,EAAD,UACGiB,EAAkBO,KAAI,SAAAC,GAAS,OAC9B,UAACvB,EAAD,YACE,SAACC,EAAD,CACEuB,IACED,EAAUE,aAAV,0CACuCF,EAAUE,cAtC/D,8EAyCYC,IAAI,YAEN,UAACxB,EAAD,WAAgB,SAAOqB,EAAUA,WAAW,UAAU,SATpCA,EAAUI,QADA,QAgBvC,C","sources":["Api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\n\nconst fetchTrendingMovies = async () => {\n    const response = await axios.get(`/trending/all/day?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.results\n};\n\nconst fetchDetailsMovie = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response\n};\n\nconst fetchSearchMovies = async (query) => {\n    const response = await axios.get(`/search/movie?query\n=${query}&include_adult=false&api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results\n};\n\nconst fetchReviews = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results[0]\n};\n\nconst fetchCredits = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.cast\n};\n\n\nexport { fetchTrendingMovies, fetchDetailsMovie, fetchSearchMovies, fetchReviews, fetchCredits };","import styled from \"styled-components\";\n\nexport const CharactersBox = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\npadding: 15px;\ngap: 15px;\nlist-style: none;\ntext-align: center;\n`;\n\nexport const CharacterItem = styled.li`\nwidth: calc(100% / 6);\ntext-decoration: none;\ntext-align: start;\n`;\n\nexport const CharacterImg = styled.img`\ndisplay: block;\nheight: 14em;\nfloat: left;\nbackground-size: cover;\nbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const TitleCharacter = styled.h3`\nmargin-top: 8px;\nmargin-bottom: 8px;\nfont-weight: 500;\nfont-size: 20px;\nline-height: 1.2;\nletter-spacing: 0.02em;\ncolor: ${p => p.theme.colors.black};\n`;","import { useParams } from 'react-router-dom';\nimport { lazy, useEffect, useState } from 'react';\nimport { fetchCredits } from 'Api';\nimport {\n  CharacterImg,\n  CharacterItem,\n  CharactersBox,\n  TitleCharacter,\n} from './Cast.styled';\n\nconst ErrorMessage = lazy(() => import('components/ErrorMessage'));\nconst Loader = lazy(() => import('components/Loader/Loader'));\nconst defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [galleryCharacters, setGalleryCharacters] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchRequest() {\n      try {\n        setIsLoading(true);\n        setError(false);\n        const detailsMovie = await fetchCredits(movieId);\n        setGalleryCharacters(detailsMovie.slice(0, 10));\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchRequest();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && (\n        <ErrorMessage>\n          Sorry, there is no information about these characters!\n        </ErrorMessage>\n      )}\n      <CharactersBox>\n        {galleryCharacters.map(character => (\n          <CharacterItem key={character.cast_id}>\n            <CharacterImg\n              src={\n                character.profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${character.profile_path}`\n                  : defaultImg\n              }\n              alt=\"poster\"\n            />\n            <TitleCharacter>Name: {character.character||'No name'} </TitleCharacter>\n          </CharacterItem>\n        ))}\n      </CharactersBox>\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","fetchTrendingMovies","response","data","results","fetchDetailsMovie","movieId","fetchSearchMovies","query","fetchReviews","fetchCredits","cast","CharactersBox","styled","CharacterItem","CharacterImg","TitleCharacter","p","theme","colors","black","ErrorMessage","lazy","Loader","useState","isLoading","setIsLoading","error","setError","galleryCharacters","setGalleryCharacters","useParams","useEffect","detailsMovie","slice","fetchRequest","map","character","src","profile_path","alt","cast_id"],"sourceRoot":""}