{"version":3,"file":"static/js/134.d1fa7a64.chunk.js","mappings":"mTACAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAmB,mCAAG,oGACDD,EAAAA,EAAAA,IAAA,6EADC,cAClBE,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAOC,GAAP,uFACCN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,6DADD,cAChBJ,EADgB,yBAEfA,GAFe,2CAAH,sDAKjBK,EAAiB,mCAAG,WAAOC,GAAP,uFACCR,EAAAA,EAAAA,IAAA,gCACxBQ,EADwB,wFADD,cAChBN,EADgB,yBAGfA,EAASC,KAAKC,SAHC,2CAAH,sDAMjBK,EAAY,mCAAG,WAAOH,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4EADN,cACXJ,EADW,yBAEVA,EAASC,KAAKC,QAAQ,IAFZ,2CAAH,sDAKZM,EAAY,mCAAG,WAAOJ,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,qEADN,cACXJ,EADW,yBAEVA,EAASC,KAAKQ,MAFJ,2CAAH,qD,gKCnBZC,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACpBC,GAASD,EAAAA,EAAAA,OAAK,kBAAM,oDAAN,IACdE,GAAaF,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAClBG,GAAaH,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAET,SAASI,IAAU,IAAD,EAC/B,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEA,GAAsDJ,EAAAA,EAAAA,UAAS,IAA/D,eAAOK,EAAP,KAA4BC,EAA5B,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMnB,EAAK,UAAGkB,EAAaE,IAAI,gBAApB,QAA8B,IAEzCC,EAAAA,EAAAA,YAAU,WAAM,wCAId,oGAEIT,GAAa,GACbE,GAAS,GAHb,UAIiCf,EAAAA,EAAAA,IAAkBC,EAAMsB,eAJzD,QAIUC,EAJV,QAMuBC,OAAS,GAC1BC,EAAAA,EAAAA,IAAM,qCAAsC,CAC1CC,SAAU,MAGZD,EAAAA,GAAAA,QAAc,sBAEhBT,EAAuBO,GAb3B,kDAeIT,GAAS,GAfb,yBAiBIF,GAAa,GAjBjB,8EAJc,sBACA,KAAVZ,GADU,mCAwBd2B,EACD,GAAE,CAAC3B,IAqBJ,OACE,iCACE,SAACQ,EAAD,CAAYoB,aArBK,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACf,GAAgC,KAA5BD,EAAKE,SAASjC,MAAMkC,MAIvB,OAHCT,EAAAA,EAAAA,IAAM,6BAA8B,CAClCC,SAAU,MAENP,EAAgB,CAAC,GAEzBA,EAAgB,CAAEnB,MAAO+B,EAAKE,SAASjC,MAAMkC,QAG7CH,EAAKI,OACN,KASG,SAAC5B,EAAD,CAAYb,SAAUqB,IAErBJ,IAAa,SAACL,EAAD,IACbO,IACC,SAACT,EAAD,UAAc,uDAIhB,SAAC,KAAD,CAASgC,SAAS,gBAGvB,C","sources":["Api.js","pages/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\n\nconst fetchTrendingMovies = async () => {\n    const response = await axios.get(`/trending/all/day?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.results\n};\n\nconst fetchDetailsMovie = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response\n};\n\nconst fetchSearchMovies = async (query) => {\n    const response = await axios.get(`/search/movie?query\n=${query}&include_adult=false&api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results\n};\n\nconst fetchReviews = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results[0]\n};\n\nconst fetchCredits = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.cast\n};\n\n\nexport { fetchTrendingMovies, fetchDetailsMovie, fetchSearchMovies, fetchReviews, fetchCredits };","import { fetchSearchMovies } from 'Api';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { lazy, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst ErrorMessage = lazy(() => import('components/ErrorMessage'));\nconst Loader = lazy(() => import('components/Loader/Loader'));\nconst MoviesList = lazy(() => import('components/MoviesList/MoviesList'));\nconst FormSearch = lazy(() => import('components/FormSearch/FormSearch'));\n\nexport default function Movies() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  // const [page, setPage] = useState(1);\n  const [gallerySearchMovies, setGallerySearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query')??'';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    async function fetchRequest() {\n      try {\n        setIsLoading(true);\n        setError(false);\n        const responseMovies = await fetchSearchMovies(query.toLowerCase());\n\n        if (responseMovies.length < 1) {\n          toast('Nothing was found for this request', {\n            duration: 6000,\n          });\n        } else {\n          toast.success('Successful request');\n        }\n        setGallerySearchMovies(responseMovies);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchRequest();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (form.elements.query.value==='') {\n      toast('Please enter a valid query', {\n        duration: 6000,\n      });\n     return setSearchParams({});\n    }\n    setSearchParams({ query: form.elements.query.value });\n    // setGallerySearchMovies([])\n    // setPage(1)\n    form.reset();\n  };\n\n  // const handleClick = () => {\n  //   setPage(prev=>prev+1)\n  // };\n\n  return (\n    <>\n      <FormSearch handleSubmit={handleSubmit} />\n      <MoviesList response={gallerySearchMovies} />\n      {/* <button type='button' onClick={handleClick}>Look for more</button> */}\n      {isLoading && <Loader />}\n      {error && (\n        <ErrorMessage>\n          Sorry, there is no information about this movies!\n        </ErrorMessage>\n      )}\n      <Toaster position=\"top-right\" />\n    </>\n  );\n}\n"],"names":["axios","fetchTrendingMovies","response","data","results","fetchDetailsMovie","movieId","fetchSearchMovies","query","fetchReviews","fetchCredits","cast","ErrorMessage","lazy","Loader","MoviesList","FormSearch","Movies","useState","isLoading","setIsLoading","error","setError","gallerySearchMovies","setGallerySearchMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","toLowerCase","responseMovies","length","toast","duration","fetchRequest","handleSubmit","e","preventDefault","form","currentTarget","elements","value","reset","position"],"sourceRoot":""}