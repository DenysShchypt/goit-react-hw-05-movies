{"version":3,"file":"static/js/779.5d3fc2c7.chunk.js","mappings":"mTACAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAmB,mCAAG,oGACDD,EAAAA,EAAAA,IAAA,6EADC,cAClBE,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAOC,GAAP,uFACCN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,6DADD,cAChBJ,EADgB,yBAEfA,GAFe,2CAAH,sDAKjBK,EAAiB,mCAAG,WAAOC,GAAP,uFACCR,EAAAA,EAAAA,IAAA,gCACxBQ,EADwB,wFADD,cAChBN,EADgB,yBAGfA,EAASC,KAAKC,SAHC,2CAAH,sDAMjBK,EAAY,mCAAG,WAAOH,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4EADN,cACXJ,EADW,yBAEVA,EAASC,KAAKC,QAAQ,IAFZ,2CAAH,sDAKZM,EAAY,mCAAG,WAAOJ,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,qEADN,cACXJ,EADW,yBAEVA,EAASC,KAAKQ,MAFJ,2CAAH,qD,wKCtBLC,EAAaC,EAAAA,GAAAA,IAAH,uCAGVC,EAAgBD,EAAAA,GAAAA,GAAH,6JAOjB,SAAAE,GAAC,OAAEA,EAAEC,MAAMC,OAAOC,KAAjB,IAGGC,EAAgBN,EAAAA,GAAAA,EAAH,qHAObO,EAAgBP,EAAAA,GAAAA,EAAH,4H,SCjBpBQ,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACpBC,GAASD,EAAAA,EAAAA,OAAK,kBAAM,oDAAN,IA+CpB,EA7CgB,WACd,OAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA8BN,EAAAA,EAAAA,UAAS,IAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAAoCR,EAAAA,EAAAA,UAAS,IAA7C,eAAOS,EAAP,KAAmBC,EAAnB,KAEQ5B,GAAY6B,EAAAA,EAAAA,MAAZ7B,QAqBR,OAnBA8B,EAAAA,EAAAA,YAAU,WAAM,wCACd,0GAEIV,GAAa,GACbE,GAAS,GAHb,UAI+BnB,EAAAA,EAAAA,IAAaH,GAJ5C,OAIU+B,EAJV,OAKUR,EAA2BQ,EAA3BR,OAAOE,EAAoBM,EAApBN,QAAQE,EAAYI,EAAZJ,WACrBH,EAAUD,GACVG,EAAWD,GACXG,EAAcD,GARlB,kDAUIL,GAAS,GAVb,yBAYIF,GAAa,GAZjB,8EADc,uBAAC,WAAD,wBAgBdY,EACD,GAAE,CAAChC,KAGF,gCACGmB,IAAa,SAACF,EAAD,IACbI,IACC,SAACN,EAAD,UAAc,qCAIlB,UAACT,EAAD,YACI,SAACE,EAAD,UAAgBe,GAAQ,WAAF,OAAaA,MACnC,SAACV,EAAD,UAAgBY,GAAS,YAAF,OAAcA,MACrC,SAACX,EAAD,UAAgBa,GAAY,iBAAF,OAAmBA,UAIpD,C","sources":["Api.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\n\nconst fetchTrendingMovies = async () => {\n    const response = await axios.get(`/trending/all/day?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.results\n};\n\nconst fetchDetailsMovie = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response\n};\n\nconst fetchSearchMovies = async (query) => {\n    const response = await axios.get(`/search/movie?query\n=${query}&include_adult=false&api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results\n};\n\nconst fetchReviews = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results[0]\n};\n\nconst fetchCredits = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.cast\n};\n\n\nexport { fetchTrendingMovies, fetchDetailsMovie, fetchSearchMovies, fetchReviews, fetchCredits };","import styled from \"styled-components\";\n\nexport const ReviewsBox = styled.div`\npadding:15px;\n`;\nexport const ReviewsAuthor = styled.h3`\nmargin-top: 8px;\nmargin-bottom: 2px;\nfont-weight: 500;\nfont-size: 20px;\nline-height: 1.5;\nletter-spacing: 0.02em;\ncolor: ${p=>p.theme.colors.black};\n`;\n\nexport const ContentAuthor = styled.p`\nmargin: 0;\nfont-weight: 400;\nfont-size: 16px;\nline-height: 1.5;\nletter-spacing: 0.02em;\n`;\nexport const CreatedAuthor = styled.p`\nmargin-top: 10px;\nfont-weight: 500;\nfont-size: 18px;\nline-height: 1.5;\nletter-spacing: 0.02em;\n`;","import { useParams } from 'react-router-dom';\nimport { lazy, useEffect, useState } from 'react';\nimport { fetchReviews } from 'Api';\nimport { ContentAuthor, CreatedAuthor, ReviewsAuthor, ReviewsBox } from './Reviews.styled';\n\nconst ErrorMessage = lazy(() => import('components/ErrorMessage'));\nconst Loader = lazy(() => import('components/Loader/Loader'));\n\nconst Reviews = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [author, setAuthor] = useState('');\n  const [content, setContent] = useState('');\n  const [created_at, setCreated_at] = useState('');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchRequest() {\n      try {\n        setIsLoading(true);\n        setError(false);\n        const detailsMovie = await fetchReviews(movieId);\n        const{author,content,created_at}=detailsMovie\n        setAuthor(author);\n        setContent(content);\n        setCreated_at(created_at);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchRequest();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && (\n        <ErrorMessage>\n          Sorry, there is no information!\n        </ErrorMessage>\n      )}\n    <ReviewsBox>\n        <ReviewsAuthor>{author&&`Author: ${author}`}</ReviewsAuthor>\n        <ContentAuthor>{content&&`Content: ${content}`}</ContentAuthor>\n        <CreatedAuthor>{created_at&&`Created data: ${created_at}`}</CreatedAuthor>\n    </ReviewsBox>\n    </>\n  );\n}\n\nexport default Reviews"],"names":["axios","fetchTrendingMovies","response","data","results","fetchDetailsMovie","movieId","fetchSearchMovies","query","fetchReviews","fetchCredits","cast","ReviewsBox","styled","ReviewsAuthor","p","theme","colors","black","ContentAuthor","CreatedAuthor","ErrorMessage","lazy","Loader","useState","isLoading","setIsLoading","error","setError","author","setAuthor","content","setContent","created_at","setCreated_at","useParams","useEffect","detailsMovie","fetchRequest"],"sourceRoot":""}