{"version":3,"file":"static/js/247.1d53e407.chunk.js","mappings":"mTACAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAmB,mCAAG,oGACDD,EAAAA,EAAAA,IAAA,6EADC,cAClBE,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAOC,GAAP,uFACCN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,6DADD,cAChBJ,EADgB,yBAEfA,GAFe,2CAAH,sDAKjBK,EAAiB,mCAAG,WAAOC,GAAP,uFACCR,EAAAA,EAAAA,IAAA,gCACxBQ,EADwB,wFADD,cAChBN,EADgB,yBAGfA,EAASC,KAAKC,SAHC,2CAAH,sDAMjBK,EAAY,mCAAG,WAAOH,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4EADN,cACXJ,EADW,yBAEVA,EAASC,KAAKC,QAAQ,IAFZ,2CAAH,sDAKZM,EAAY,mCAAG,WAAOJ,GAAP,uFACMN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,qEADN,cACXJ,EADW,yBAEVA,EAASC,KAAKQ,MAFJ,2CAAH,qD,gHCpBZC,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACpBC,GAASD,EAAAA,EAAAA,OAAK,kBAAM,oDAAN,IAuDpB,UAnDa,WACX,OAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkDJ,EAAAA,EAAAA,UAAS,IAA3D,eAAOK,EAAP,KAA0BC,EAA1B,KAEQf,GAAYgB,EAAAA,EAAAA,MAAZhB,QAkBR,OAhBAiB,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIN,GAAa,GACbE,GAAS,GAHb,UAI+BT,EAAAA,EAAAA,IAAaJ,GAJ5C,OAIUkB,EAJV,OAKIH,EAAqBG,EAAaC,MAAM,EAAG,KAL/C,gDAOIN,GAAS,GAPb,yBASIF,GAAa,GATjB,6EADc,uBAAC,WAAD,wBAadS,EACD,GAAE,CAACpB,KAGF,gCACGU,IAAa,SAACF,EAAD,IACbI,IACC,SAACN,EAAD,UAAc,4DAIhB,wBACGQ,EAAkBO,KAAI,SAAAC,GAAS,OAC9B,2BACE,gBACEC,IACED,EAAUE,aAAV,0CACuCF,EAAUE,cAvC/D,8EA0CYC,MAAO,IACPC,IAAI,YAEN,0BAAI,oBAAkBJ,EAAUA,UAAU,SAVnCA,EAAUK,QADW,QAiBvC,C","sources":["Api.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\n\nconst fetchTrendingMovies = async () => {\n    const response = await axios.get(`/trending/all/day?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.results\n};\n\nconst fetchDetailsMovie = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response\n};\n\nconst fetchSearchMovies = async (query) => {\n    const response = await axios.get(`/search/movie?query\n=${query}&include_adult=false&api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results\n};\n\nconst fetchReviews = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US&page=1`)\n    return response.data.results[0]\n};\n\nconst fetchCredits = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=020a69ea7370c77aa06eca2a5130dadb&language=en-US`)\n    return response.data.cast\n};\n\n\nexport { fetchTrendingMovies, fetchDetailsMovie, fetchSearchMovies, fetchReviews, fetchCredits };","import { useParams } from 'react-router-dom';\nimport { lazy, useEffect, useState } from 'react';\nimport { fetchCredits } from 'Api';\n\nconst ErrorMessage = lazy(() => import('components/ErrorMessage'));\nconst Loader = lazy(() => import('components/Loader/Loader'));\nconst defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [galleryCharacters, setGalleryCharacters] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchRequest() {\n      try {\n        setIsLoading(true);\n        setError(false);\n        const detailsMovie = await fetchCredits(movieId);\n        setGalleryCharacters(detailsMovie.slice(0, 10));\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchRequest();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && (\n        <ErrorMessage>\n          Sorry, there is no information about these characters!\n        </ErrorMessage>\n      )}\n      <ul>\n        {galleryCharacters.map(character => (\n          <li key={character.cast_id}>\n            <img\n              src={\n                character.profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${character.profile_path}`\n                  : defaultImg\n              }\n              width={100}\n              alt=\"poster\"\n            />\n            <h3>Name character : {character.character} </h3>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","fetchTrendingMovies","response","data","results","fetchDetailsMovie","movieId","fetchSearchMovies","query","fetchReviews","fetchCredits","cast","ErrorMessage","lazy","Loader","useState","isLoading","setIsLoading","error","setError","galleryCharacters","setGalleryCharacters","useParams","useEffect","detailsMovie","slice","fetchRequest","map","character","src","profile_path","width","alt","cast_id"],"sourceRoot":""}